let plus := ^n. ^m. ^f. ^x. n f (m f x)  in
let nil := ^_. ^z. z in
let cons := ^x. ^xs. ^f. ^z. f x (xs f z) in
let nat2char := plus 48 in
let fib := ^n.
  n
    (^p. ^f. p (^a. ^b.
      f (plus a b) a))
    (^f. f 1 0)
    (^a. ^b. b) in
  ^stdin. cons (nat2char (fib 0)) (cons ','
  (cons (nat2char (fib 1)) (cons ','
  (cons (nat2char (fib 2)) (cons ','
  (cons (nat2char (fib 3)) (cons ','
  (cons (nat2char (fib 4)) (cons ','
  (cons (nat2char (fib 5)) (cons ','
  (cons (nat2char (fib 6)) (cons '\n' nil)))))))))))))
