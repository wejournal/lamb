let hex := ^n. ^f. ^z. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7.
  let x :=
    if _7
      (if _6
        (if _5
          (if _4
            'F'
            'E')
          (if _4
            'D'
            'C'))
        (if _5
          (if _4
            'B'
            'A')
          (if _4
            '9'
            '8')))
      (if _6
        (if _5
          (if _4
            '7'
            '6')
          (if _4
            '5'
            '4'))
        (if _5
          (if _4
            '3'
            '2')
          (if _4
            '1'
            '0'))) in
  let y :=
    if _3
      (if _2
        (if _1
          (if _0
            'F'
            'E')
          (if _0
            'D'
            'C'))
        (if _1
          (if _0
            'B'
            'A')
          (if _0
            '9'
            '8')))
      (if _2
        (if _1
          (if _0
            '7'
            '6')
          (if _0
            '5'
            '4'))
        (if _1
          (if _0
            '3'
            '2')
          (if _0
            '1'
            '0'))) in
  f x (f y z)) in

B (^xs. xs append nil) (map (B hex bin8))
