-- Combinators
let B : ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c := ^x. ^y. ^z. x (y z) in
let C : ('b -> 'a -> 'c) -> 'a -> 'b -> 'c := ^x. ^y. ^z. x z y in
let I : 'a -> 'a := ^x. x in
let K : 'a -> 'b -> 'a := ^x. ^_. x in
let S : ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c := ^x. ^y. ^z. x z (y z) in
let W : ('a -> 'a -> 'b) -> 'a -> 'b := ^x. ^y. x y y in

-- Booleans
-- let 'bool := 'a -> 'a -> 'a
let false : 'bool := ^_. ^y. y in
let true : 'bool := ^x. ^_. x in
let and : 'bool -> 'bool -> 'bool := ^p. ^q. ^x. ^y. p (q x y) y in
let or : 'bool -> 'bool -> 'bool := ^p. ^q. ^x. ^y. p x (q x y) in
let not : 'bool -> 'bool := ^p. ^x. ^y. p y x in
let if : 'bool -> 'a -> 'a -> 'a := ^p. ^x. ^y. p x y in

-- Numbers
-- let 'nat := ('a -> 'a) -> 'a -> 'a
let succ : 'nat -> 'nat := ^n. ^f. ^x. f (n f x) in
let plus : 'nat -> 'nat -> 'nat := ^n. ^m. ^f. ^x. n f (m f x)  in

-- Lists
-- let 'alist := ('a -> 'b -> 'b) -> 'b -> 'b
let nil : 'alist := ^_. ^z. z in
let cons : 'a -> 'alist -> 'alist := ^x. ^xs. ^f. ^z. f x (xs f z) in
