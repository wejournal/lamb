-- Combinators
let B : (b -> c) -> (a -> b) -> a -> c := ^x. ^y. ^z. x (y z) in
let C : (b -> a -> c) -> a -> b -> c := ^x. ^y. ^z. x z y in
let I : a -> a := ^x. x in
let K : a -> b -> a := ^x. ^_. x in
let S : (a -> b -> c) -> (a -> b) -> a -> c := ^x. ^y. ^z. x z (y z) in
let W : (a -> a -> b) -> a -> b := ^x. ^y. x y y in

-- Booleans
-- type bool[a] := a -> a -> a

--| false : bool[a]
let false
  : (a -> a -> a) -- bool[a]
  := ^_. ^y. y in

--| true : bool[a]
let true
  : (a -> a -> a) -- bool[a]
  := ^x. ^_. x in

--| not : bool[a] -> bool[a]
let not
  : (a -> a -> a) -- bool[a]
  -> (a -> a -> a) -- bool[a]
  := ^p. ^x. ^y. p y x in

--| and : bool[a] -> bool[a] -> bool[a]
let and
  : (a -> a -> a) -- bool[a]
  -> (a -> a -> a) -- bool[a]
  -> (a -> a -> a) -- bool[a]
  := ^p. ^q. ^x. ^y. p (q x y) y in

--| or : bool[a] -> bool[a] -> bool[a]
let or
  : (a -> a -> a) -- bool[a]
  -> (a -> a -> a) -- bool[a]
  -> (a -> a -> a) -- bool[a]
  := ^p. ^q. ^x. ^y. p x (q x y) in

--| xor : bool[a] -> bool[a] -> bool[a]
let xor
  : (a -> a -> a) -- bool[a]
  -> (a -> a -> a) -- bool[a]
  -> (a -> a -> a) -- bool[a]
  := ^p. ^q. ^x. ^y. p (q y x) (q x y) in

--| if : bool[a] -> a -> a -> a
let if
  : (a -> a -> a) -- bool[a]
  -> a
  -> a
  -> a
  := ^p. ^x. ^y. p x y in

-- Pairs
-- type pair[a, b, c] := (a -> b -> c) -> c

--| pair : a -> b -> pair[a, b, c]
let pair
  : a
  -> b
  -> ((a -> b -> c) -> c) -- pair[a, b, c]
  := ^x. ^y. ^f. f x y in

--| fst : pair[a, b, a] -> a
let fst
  : ((a -> b -> a) -> a) -- pair[a, b, a]
  -> a
  := ^p. p K in

--| snd : pair[a, b, b] -> b
let snd
  : ((a -> b -> b) -> b) -- pair[a, b, b]
  -> b
  := ^p. p (K I) in

-- Numbers
-- type nat[a] := (a -> a) -> a -> a

--| succ : nat[a] -> nat[a]
let succ
  : ((a -> a) -> a -> a) -- nat[a]
  -> ((a -> a) -> a -> a) -- nat[a]
  := ^n. ^f. ^x. f (n f x) in

--| pred : nat[(a -> a) -> a] -> nat[a]
let pred
  : ((((a -> a) -> a) -> (a -> a) -> a) -> ((a -> a) -> a) -> (a -> a) -> a) -- nat[(a -> a) -> a]
  -> ((a -> a) -> a -> a) -- nat[a]
  := ^n. ^f. ^x. n (^g. ^h. h (g f)) (K x) I in

--| plus : nat[a] -> nat[a] -> nat[a]
let plus
  : ((a -> a) -> a -> a) -- nat[a]
  -> ((a -> a) -> a -> a) -- nat[a]
  -> ((a -> a) -> a -> a) -- nat[a]
  := ^n. ^m. ^f. ^x. n f (m f x)  in

--| odd : nat[bool[a]] -> bool[a]
let odd
  : (((a -> a -> a) -> a -> a -> a) -> (a -> a -> a) -> a -> a -> a) -- nat[bool[a]]
  -> (a -> a -> a) -- bool[a]
  := ^n. n not false in

--| even : nat[bool[a]] -> bool[a]
let even
  : (((a -> a -> a) -> a -> a -> a) -> (a -> a -> a) -> a -> a -> a) -- nat[bool[a]]
  -> (a -> a -> a) -- bool[a]
  := ^n. n not true in

--| is_zero : nat[a] -> bool[a]
let is_zero
  : ((a -> a) -> a -> a)
  -> (a -> a -> a)
  := ^n. ^x. ^y. n (K x) y in

--| odd_copy : nat[pair[bool[a], nat[a]]] -> pair[bool[a], nat[a]]
let odd_copy := ^n. n (^p. ^f. p (^b. ^n. f (not b) (succ n))) (^f. f false 0) in

--| even_copy : nat[pair[bool[a], nat[a]]] -> pair[bool[a], nat[a]]
let even_copy := ^n. n (^p. ^f. p (^b. ^n. f (not b) (succ n))) (^f. f true 0) in

-- Lists
-- type list[a, b] := (a -> b -> b) -> b -> b

--| nil : list[a, b]
let nil
  : ((a -> b -> b) -> b -> b) -- list[a, b]
  := ^_. ^z. z in

--| cons : a -> list[a, b] -> list[a, b]
let cons
  : a
  -> ((a -> b -> b) -> b -> b) -- list[a, b]
  -> ((a -> b -> b) -> b -> b) -- list[a, b]
  := ^x. ^xs. ^f. ^z. f x (xs f z) in

--| hd : list[a, a] -> a -> a
let hd
  : ((a -> a -> a) -> a -> a) -- list[a, a]
  -> a
  -> a
  := ^xs. xs K in

--| tl : list[a, pair[b, b, b]] -> list[a, b]
let tl
  : ((a -> ((b -> b -> b) -> b) -> ((b -> b -> b) -> b)) -> ((b -> b -> b) -> b) -> (b -> b -> b) -> b) -- list[a, pair[b, b, b]]
  -> ((a -> b -> b) -> b -> b) -- list[a, b]
  := ^xs. ^f. ^z. fst (xs (^y. ^z. pair (snd z) (f y (snd z))) (pair z z)) in

--| map : (a -> b) -> list[a, c] -> list[b, c]
let map
  : (a -> b)
  -> ((a -> c -> c) -> c -> c) -- list[a, c]
  -> ((b -> c -> c) -> c -> c) -- list[b, c]
  := ^f. ^xs. ^g. ^z. xs (^x. ^z. g (f x) z) z in

--| filter : (a -> bool[b]) -> list[a, b] -> list[a, b]
let filter
  : (a
    -> (b -> b -> b)) -- bool[b]
  -> ((a -> b -> b) -> b -> b) -- list[a, b]
  -> ((a -> b -> b) -> b -> b) -- list[a, b]
  := ^f. ^xs. ^g. ^z. xs (^x. ^z. if (f x) (g x z) z) z in

--| filter_map : (a -> pair[bool[c], b, c]) -> list[a, c] -> list[b, c]
let filter_map
  : (a
    -> (((c -> c -> c) -> b -> c) -> c)) -- pair[bool[c], b, c]
  -> ((a -> c -> c) -> c -> c) -- list[a, c]
  -> ((b -> c -> c) -> c -> c) -- list[b, c]
  := ^f. ^xs. ^g. ^z. xs (^x. ^z. f x (^b. ^y. if b (g y z) z)) z in

--| reverse : list[a, b -> b] -> list[a, b]
let reverse
  : ((a -> (b -> b) -> b -> b) -> (b -> b) -> b -> b) -- list[a, b -> b]
  -> ((a -> b -> b) -> b -> b) -- list[a, b]
  := ^xs. ^f. ^z. xs (^x. ^k. ^z. k (f x z)) I z in

--| reverse_range : nat[a] -> nat[nat[a] -> b -> b] -> list[nat[a], b]
let reverse_range
  : ((a -> a) -> a -> a) -- nat[a]
  -> (((((a -> a) -> a -> a) -> b -> b) -> (((a -> a) -> a -> a) -> b -> b)) -> (((a -> a) -> a -> a) -> b -> b) -> (((a -> a) -> a -> a) -> b -> b)) -- nat[nat[a] -> b -> b]
  -> ((((a -> a) -> a -> a) -> b -> b) -> b -> b) -- list[nat[a], b]
  := ^n. ^m. ^f. ^z. m (^k. ^n. ^z. k (succ n) (f n z)) (K I) n z in

--| range : nat[a] -> nat[nat[a] -> (b -> b) -> (b -> b)] -> list[nat[a], b]
let range
  : ((a -> a) -> a -> a) -- nat[a]
  -> (((((a -> a) -> a -> a) -> (b -> b) -> (b -> b)) -> (((a -> a) -> a -> a) -> (b -> b) -> (b -> b))) -> (((a -> a) -> a -> a) -> (b -> b) -> (b -> b)) -> (((a -> a) -> a -> a) -> (b -> b) -> (b -> b))) -- nat[nat[a] -> (b -> b) -> (b -> b)]
  -> ((((a -> a) -> a -> a) -> b -> b) -> b -> b) -- list[nat[a], b]
  := ^n. ^m. reverse (reverse_range n m) in

-- type bin8[a] := (bool[a] -> bool[a] -> bool[a] -> bool[a] -> bool[a] -> bool[a] -> bool[a] -> bool[a] -> a) -> a

--| zero8 : bin8[a]
let zero8
  : ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^f. f false false false false false false false false in

--| sup8 : bin8[a]
let sup8
  : ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^f. f true true true true true true true true in

--| not8 : bin8[a] -> bin8[a]
let not8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^f. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7.
    f (not _0) (not _1) (not _2) (not _3) (not _4) (not _5) (not _6) (not _7)) in

--| and8 : bin8[a] -> bin8[a] -> bin8[a]
let and8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^m. ^f. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7. m (^__0. ^__1. ^__2. ^__3. ^__4. ^__5. ^__6. ^__7.
    f (and _0 __0) (and _1 __1) (and _2 __2) (and _3 __3) (and _4 __4) (and _5 __5) (and _6 __6) (and _7 __7))) in

--| or8 : bin8[a] -> bin8[a] -> bin8[a]
let or8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^m. ^f. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7. m (^__0. ^__1. ^__2. ^__3. ^__4. ^__5. ^__6. ^__7.
    f (or _0 __0) (or _1 __1) (or _2 __2) (or _3 __3) (or _4 __4) (or _5 __5) (or _6 __6) (or _7 __7))) in

--| xor8 : bin8[a] -> bin8[a] -> bin8[a]
let xor8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^m. ^f. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7. m (^__0. ^__1. ^__2. ^__3. ^__4. ^__5. ^__6. ^__7.
    f (xor _0 __0) (xor _1 __1) (xor _2 __2) (xor _3 __3) (xor _4 __4) (xor _5 __5) (xor _6 __6) (xor _7 __7))) in

--| is_zero8 : bin8[a] -> bool[a]
let is_zero8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (a -> a -> a)
  := ^n. ^x. ^y. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7.
      not (or _0 (or _1 (or _2 (or _3 (or _4 (or _5 (or _6 _7))))))) x y) in

--| not_eq8 : bin8[a] -> bin8[a] -> bool[a]
let not_eq8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (a -> a -> a)
  := ^n. ^m. ^x. ^y. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7. m (^__0. ^__1. ^__2. ^__3. ^__4. ^__5. ^__6. ^__7.
      or (xor _0 __0) (or (xor _1 __1) (or (xor _2 __2) (or (xor _3 __3) (or (xor _4 __4) (or (xor _5 __6) (or (xor _6 __6) (xor _7 __7))))))) x y)) in

--| eq8 : bin8[a] -> bin8[a] -> bool[a]
let eq8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (a -> a -> a)
  := ^n. ^m. not (not_eq8 n m) in

--| sl8 : bin8[a] -> bin8[a]
let sl8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^f. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7.
    f false _0 _1 _2 _3 _4 _5 _6) in

--| sr8 : bin8[a] -> bin8[a]
let sr8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^f. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7.
    f _1 _2 _3 _4 _5 _6 _7 false) in

--| add8 : bin8[a] -> bin8[a] -> bin8[a]
let add8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^m. ^f.
    if (is_zero8 m)
      (n f)
      (let n0 := xor8 n m in
      let m0 := sl8 (and8 n m) in
      if (is_zero8 m0)
        (n0 f)
        (let n1 := xor8 n0 m0 in
        let m1 := sl8 (and8 n0 m0) in
          if (is_zero8 m1)
            (n1 f)
            (let n2 := xor8 n1 m1 in
            let m2 := sl8 (and8 n1 m1) in
              if (is_zero8 m2)
                (n2 f)
                (let n3 := xor8 n2 m2 in
                let m3 := sl8 (and8 n2 m2) in
                  if (is_zero8 m3)
                    (n3 f)
                    (let n4 := xor8 n3 m3 in
                    let m4 := sl8 (and8 n3 m3) in
                      if (is_zero8 m1)
                        (n4 f)
                        (let n5 := xor8 n4 m4 in
                        let m5 := sl8 (and8 n4 m4) in
                          if (is_zero8 m5)
                            (n5 f)
                            (let n6 := xor8 n5 m5 in
                            let m6 := sl8 (and8 n5 m5) in
                              if (is_zero8 m6)
                                (n6 f)
                                (let n7 := xor8 n6 m6 in
                                  n7 f)))))))) in

--| nat8 : bin8[a] -> nat[a]
let nat8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a) -> a -> a)
  := ^n. ^f. ^z. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7.
    let g := ^z. if _7 (f z) z in
    let g := ^z. if _6 (f (g (g z))) (g (g z)) in
    let g := ^z. if _5 (f (g (g z))) (g (g z)) in
    let g := ^z. if _4 (f (g (g z))) (g (g z)) in
    let g := ^z. if _3 (f (g (g z))) (g (g z)) in
    let g := ^z. if _2 (f (g (g z))) (g (g z)) in
    let g := ^z. if _1 (f (g (g z))) (g (g z)) in
    let g := ^z. if _0 (f (g (g z))) (g (g z)) in
    g z) in

--| inc8 : bin8[a] -> bin8[a]
let inc8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^f. n (^_0. ^_1. ^_2. ^_3. ^_4. ^_5. ^_6. ^_7.
    if _0
      (if _1
        (if _2
          (if _3
            (if _4
              (if _5
                (if _6
                  (f false false false false false false false (not _7))
                  (f false false false false false false (not _6) _7))
                (f false false false false false (not _5) _6 _7))
              (f false false false false (not _4) _5 _6 _7))
            (f false false false (not _3) _4 _5 _6 _7))
          (f false false (not _2) _3 _4 _5 _6 _7))
        (f false (not _1) _2 _3 _4 _5 _6 _7))
        (f (not _0) _1 _2 _3 _4 _5 _6 _7)) in

--| sub8 : bin8[a] -> bin8[a] -> bin8[a]
let sub8
  : (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> (((a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> (a -> a -> a)
      -> a)
    -> a)
  -> ((a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> (a -> a -> a)
    -> a)
  -> a
  := ^n. ^m. add8 n (inc8 (not8 m)) in
