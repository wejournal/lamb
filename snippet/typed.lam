-- Combinators
let B : ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c := ^x. ^y. ^z. x (y z) in
let C : ('b -> 'a -> 'c) -> 'a -> 'b -> 'c := ^x. ^y. ^z. x z y in
let I : 'a -> 'a := ^x. x in
let K : 'a -> 'b -> 'a := ^x. ^_. x in
let S : ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c := ^x. ^y. ^z. x z (y z) in
let W : ('a -> 'a -> 'b) -> 'a -> 'b := ^x. ^y. x y y in

-- Booleans
-- let 'bool := 'a -> 'a -> 'a
let false : 'bool := ^_. ^y. y in
let true : 'bool := ^x. ^_. x in
let and : ('bool -> 'bool -> 'bool) -> 'bool -> 'bool := ^p. ^q. p q false in
let or : ('bool -> 'bool -> 'bool) -> 'bool -> 'bool := ^p. ^q. p true q in
let not : ('bool -> 'bool -> 'bool) -> 'bool := ^p. p false true in
let if : 'bool -> 'a -> 'a -> 'a := ^p. ^x. ^y. p x y in

-- Numbers
-- let 'nat := ('a -> 'a) -> 'a -> 'a
let succ : 'nat -> 'nat := ^n. ^f. ^x. f (n f x) in
let pred := ^n. ^f. ^x. n (^g. ^h. h (g f)) (K x) I in
let plus : 'nat -> 'nat -> 'nat := ^n. ^m. ^f. ^x. n f (m f x)  in
let mult : (('nat -> 'nat) -> 'nat -> 'nat) -> 'nat -> 'nat := ^n. ^m. n (plus m) 0 in
let minus := ^n. ^m. m pred n in
let is_zero : 'nat -> 'bool := ^n. n (^_. false) true in
let odd := ^n. n not false in
let even := ^n. n not true in

-- Lists
let nil := ^_. ^z. z in
let cons := ^x. ^xs. ^f. ^z. f x (xs f z) in
let append := ^xs. ^ys. xs cons ys in
let concat :=  ^xss.  xss append nil in
let map := ^f. ^xs. xs (^x. ^ys. cons (f x) ys) nil in
let filter := ^f. ^xs. xs (^x. ^ys. if (f x) (cons x ys) ys) nil in
let reverse := ^xs. xs (^x. ^k. ^ys. k (cons x ys)) I nil in
let reverse_range := ^n. ^m. (m (^f. ^g. f (^k. ^ns. g (succ k) (cons k ns))) (^f. f n nil)) (^_. ^ns. ns) in
let range := ^n. ^m. reverse (reverse_range n m) in
