-- Combinators
let B : ('b -> 'c) -> ('a -> 'b) -> 'a -> 'c := ^x. ^y. ^z. x (y z) in
let C : ('b -> 'a -> 'c) -> 'a -> 'b -> 'c := ^x. ^y. ^z. x z y in
let I : 'a -> 'a := ^x. x in
let K : 'a -> 'b -> 'a := ^x. ^_. x in
let S : ('a -> 'b -> 'c) -> ('a -> 'b) -> 'a -> 'c := ^x. ^y. ^z. x z (y z) in
let W : ('a -> 'a -> 'b) -> 'a -> 'b := ^x. ^y. x y y in

-- Booleans
-- let 'bool := 'a -> 'a -> 'a
let false : 'bool := ^_. ^y. y in
let true : 'bool := ^x. ^_. x in
let and : 'bool -> 'bool -> 'bool := ^p. ^q. ^x. ^y. p (q x y) y in
let or : 'bool -> 'bool -> 'bool := ^p. ^q. ^x. ^y. p x (q x y) in
let not : 'bool -> 'bool := ^p. ^x. ^y. p y x in
let if : 'bool -> 'a -> 'a -> 'a := ^p. ^x. ^y. p x y in

-- Numbers
-- let 'nat := ('a -> 'a) -> 'a -> 'a
let succ : 'nat -> 'nat := ^n. ^f. ^x. f (n f x) in
let plus : 'nat -> 'nat -> 'nat := ^n. ^m. ^f. ^x. n f (m f x)  in
let odd : 'nat -> 'bool := ^n. n not false in
let even : 'nat -> 'bool := ^n. n not true in

-- Pairs
let pair : 'a -> 'b -> 'abpair := ^x. ^y. ^f. f x y in
let fst : 'abpair -> 'a := ^p. p K in
let snd : 'abpair -> 'b := ^p. p (K I) in

-- Lists
-- let 'alist := ('a -> 'b -> 'b) -> 'b -> 'b
let nil : 'alist := ^_. ^z. z in
let cons : 'a -> 'alist -> 'alist := ^x. ^xs. ^f. ^z. f x (xs f z) in
let hd : 'alist -> 'a -> 'a := ^xs. xs K in
let tl : 'alist -> 'blist := ^xs. ^f. ^z. fst (xs (^y. ^z. pair (snd z) (f y (snd z))) (pair z z)) in
let filter : ('a -> 'bool) -> 'alist -> 'alist := ^f. ^xs. ^g. ^z. xs (^x. ^z. if (f x) (g x z) z) z in
let reverse := ^xs. ^f. ^z. xs (^x. ^k. ^z. k (f x z)) I z in
let reverse_range := ^n. ^m. ^f. ^z. m (^k. ^n. ^z. k (succ n) (f n z)) (K I) n z in
let range := ^n. ^m. reverse (reverse_range n m) in
