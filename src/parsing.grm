local open TypedTerm in
  fun encodeNat' (r, 0w0) = VAR (r, "O")
    | encodeNat' (r, n) = APP (r, VAR (r, "S"), encodeNat' (r, LargeWord.- (n, 0w1)))

  fun encodeNat (r, n) = let
    val O = ABS (r, (r, "f"), NONE, ABS (r, (r, "z"), NONE, VAR (r, "z")))
    val S = ABS (r, (r, "n"), NONE, ABS (r, (r, "f"), NONE, ABS (r, (r, "z"), NONE, APP (r, VAR (r, "f"), APP (r, APP (r, VAR (r, "n"), VAR (r, "f")), VAR (r, "z"))))))
  in
    LET (r, (r, "O"), NONE, O, LET (r, (r, "S"), NONE, S, encodeNat' (r, n)))
  end

  fun encodeChar (r, c) = encodeNat (r, LargeWord.fromInt (ord c))

  fun encodeCharList' (r, nil) = VAR (r, "nil")
    | encodeCharList' (r, t :: ts) = APP (r, APP (r, VAR (r, "cons"), t), encodeCharList' (r, ts))

  fun encodeCharList (r, l) = let
    val nil' = ABS (r, (r, "f"), NONE, ABS (r, (r, "z"), NONE, VAR (r, "z")))
    val cons = ABS (r, (r, "x"), NONE, ABS (r, (r, "xs"), NONE, ABS (r, (r, "f"), NONE, ABS (r, (r, "z"), NONE, APP (r, APP (r, VAR (r, "f"), VAR (r, "x")), APP (r, APP (r, VAR (r, "xs"), VAR (r, "f")), VAR (r, "z")))))))
  in
    LET (r, (r, "nil"), NONE, nil', LET (r, (r, "cons"), NONE, cons, encodeCharList' (r, l)))
  end

  fun encodeString (r, s) = encodeCharList (r, map (fn c => encodeChar (r, c)) (String.explode s))
end

val fresh = ref 0

fun gensym () = let
  val i = !fresh
in
  fresh := !fresh + 1
; Int.toString i
end

val tycxt = ref (gensym ())

%%
%eop EOF
%pos cursor

%term
  EOF
| QUOTE
| LPAREN
| RPAREN
| ARROW
| DOT
| COLON
| COLONEQ
| LAMBDA
| IN
| LET
| NAT of LargeWord.word
| CHAR of char
| STRING of string
| ID of string

%nonterm
  program of TypedTerm.t
| ty of Type.t
| atty of Type.t
| tyopt of Type.t option
| exp of TypedTerm.t
| appexp of TypedTerm.t
| atexp of TypedTerm.t

%name Parsing
%noshift EOF
%%

program:
  exp
    (exp)

ty:
  atty
    (atty)
| atty ARROW ty
    (Type.ARR ((attyleft, tyright), atty, ty))

atty:
  QUOTE ID
    (Type.VAR ((QUOTEleft, IDright), ID ^ !tycxt))
| ID
    (Type.CON ((IDleft, IDright), ID))
| LPAREN ty RPAREN
    (ty)

tyopt:
    (NONE)
| COLON ty
    (tycxt := gensym (); SOME ty)

exp:
  appexp
    (appexp)
| LAMBDA ID tyopt DOT exp
    (TypedTerm.ABS ((LAMBDAleft, expright), ((IDleft, IDright), ID), tyopt, exp))
| LET ID tyopt COLONEQ exp IN exp
    (TypedTerm.LET ((LETleft, expright), ((IDleft, IDright), ID), tyopt, exp1, exp2))

appexp:
  atexp
    (atexp)
| appexp atexp
    (TypedTerm.APP ((appexpleft, atexpright), appexp, atexp))

atexp:
  NAT
    (encodeNat ((NATleft, NATright), NAT))
| CHAR
    (encodeChar ((CHARleft, CHARright), CHAR))
| STRING
    (encodeString ((STRINGleft, STRINGright), STRING))
| ID
    (TypedTerm.VAR ((IDleft, IDright), ID))
| LPAREN exp RPAREN
    (exp)
