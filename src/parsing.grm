local open AST.Exp in
  fun encodeNat (r, n) = let
    val i = ref 0w0
    val t = ref (VAR (r, "z"))
  in
    while !i < n do (
      t := APP (r, (VAR (r, "f"), !t))
    ; i := !i + 0w1
    )
  ; ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE, !t))))
  end

  fun encodeChar (r, c) = encodeNat (r, LargeWord.fromInt (ord c))

  fun encodeList (r, nil) = VAR (r, "z")
    | encodeList (r, t :: ts) = APP (r, (APP (r, (VAR (r, "f"), t)), encodeList (r, ts)))

  fun encodeString (r, s) =
    ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE,
      encodeList (r, map (fn c => encodeChar (r, c)) (String.explode s))))))
end

%%
%eop EOF
%pos cursor

%term
  EOF
| QUOTE
| LPAREN
| RPAREN
| ARROW
| DOT
| COLON
| COLONEQ
| LAMBDA
| DEF
| IN
| LET
| TYPE
| VAL
| NAT of LargeWord.word
| CHAR of char
| STRING of string
| ID of string

%nonterm
  program of AST.Program.t
| decls of AST.Decl.t list
| decl of AST.Decl.t
| ty of AST.Type.t
| atty of AST.Type.t
| asc of AST.Type.t option
| exp of AST.Exp.t
| appexp of AST.Exp.t
| atexp of AST.Exp.t

%name Parsing
%noshift EOF
%%

program:
  decls
    (decls)

decls:
    (nil)
| decl decls
    (decl :: decls)

decl:
  TYPE ID
    (AST.Decl.TYPE ((TYPEleft, IDright), (((IDleft, IDright), ID))))
| VAL ID COLON ty
    (AST.Decl.VAL ((VALleft, tyright), (((IDleft, IDright), ID), ty)))
| DEF ID asc COLONEQ exp
    (AST.Decl.DEF ((DEFleft, expright), (((IDleft, IDright), ID), asc, exp)))

ty:
  atty
    (atty)
| atty ARROW ty
    (AST.Type.ARR ((attyleft, tyright), (atty, ty)))

atty:
  QUOTE ID
    (AST.Type.VAR ((QUOTEleft, IDright), ID))
| ID
    (AST.Type.CON ((IDleft, IDright), ID))
| LPAREN ty RPAREN
    (ty)

asc:
    (NONE)
| COLON ty
    (SOME ty)

exp:
  appexp
    (appexp)
| LAMBDA ID asc DOT exp
    (AST.Exp.ABS ((LAMBDAleft, expright), (((IDleft, IDright), ID), asc, exp)))
| LET ID asc COLONEQ exp IN exp
    (AST.Exp.LET ((LETleft, expright), (((IDleft, IDright), ID), asc, exp1, exp2)))

appexp:
  atexp
    (atexp)
| appexp atexp
    (AST.Exp.APP ((appexpleft, atexpright), (appexp, atexp)))

atexp:
  NAT
    (encodeNat ((NATleft, NATright), NAT))
| CHAR
    (encodeChar ((CHARleft, CHARright), CHAR))
| STRING
    (encodeString ((STRINGleft, STRINGright), STRING))
| ID
    (AST.Exp.VAR ((IDleft, IDright), ID))
| LPAREN exp RPAREN
    (exp)
