local open TypedTerm in
  fun encodeNat' (r, 0w0) = VAR (r, "O")
    | encodeNat' (r, n) = APP (r, (VAR (r, "S"), encodeNat' (r, LargeWord.- (n, 0w1))))

  fun encodeNat (r, n) = let
    val O = ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE, VAR (r, "z")))))
    val S = ABS (r, ((r, "n"), NONE, ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE, APP (r, (VAR (r, "f"), APP (r, (APP (r, (VAR (r, "n"), VAR (r, "f"))), VAR (r, "z")))))))))))
  in
    LET (r, ((r, "O"), NONE, O, LET (r, ((r, "S"), NONE, S, encodeNat' (r, n)))))
  end

  fun encodeNatOpt' (r, 0w0) = encodeNat' (r, 0w0)
    | encodeNatOpt' (r, 0w1) = encodeNat' (r, 0w1)
    | encodeNatOpt' (r, 0w2) = encodeNat' (r, 0w2)
    | encodeNatOpt' (r, 0w3) = encodeNat' (r, 0w3)
    | encodeNatOpt' (r, n) = let
        val m = LargeWord.div (n, 0w2)
        val t = encodeNatOpt' (r, m)
        val x = "n" ^ LargeWord.fmt StringCvt.DEC m
        val t' = VAR (r, x)
      in
        if LargeWord.mod (n, 0w2) = 0w0 then
          LET (r, ((r, x), NONE, t, APP (r, (APP (r, (VAR (r, "plus"), t')), t'))))
        else
          LET (r, ((r, x), NONE, t, APP (r, (VAR (r, "S"), APP (r, (APP (r, (VAR (r, "plus"), t')), t'))))))
      end

  fun encodeNatOpt (r, 0w0) = encodeNat (r, 0w0)
    | encodeNatOpt (r, 0w1) = encodeNat (r, 0w1)
    | encodeNatOpt (r, 0w2) = encodeNat (r, 0w2)
    | encodeNatOpt (r, 0w3) = encodeNat (r, 0w3)
    | encodeNatOpt (r, n) = let
        val O = ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE, VAR (r, "z")))))
        val S = ABS (r, ((r, "n"), NONE, ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE, APP (r, (VAR (r, "f"), APP (r, (APP (r, (VAR (r, "n"), VAR (r, "f"))), VAR (r, "z")))))))))))
        val plus = ABS (r, ((r, "n"), NONE, ABS (r, ((r, "m"), NONE, ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE, APP (r, (APP (r, (VAR (r, "n"), VAR (r, "f"))), APP (r, (APP (r, (VAR (r, "m"), VAR (r, "f"))), VAR (r, "z")))))))))))))
      in
        LET (r, ((r, "O"), NONE, O, LET (r, ((r, "S"), NONE, S, LET (r, ((r, "plus"), NONE, plus, encodeNatOpt' (r, n)))))))
      end

  fun encodeChar (r, c) = encodeNatOpt (r, LargeWord.fromInt (ord c))

  fun encodeCharList' (r, nil) = VAR (r, "nil")
    | encodeCharList' (r, t :: ts) = APP (r, (APP (r, (VAR (r, "cons"), t)), encodeCharList' (r, ts)))

  fun encodeCharList (r, l) = let
    val nil' = ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE, VAR (r, "z")))))
    val cons = ABS (r, ((r, "x"), NONE, ABS (r, ((r, "xs"), NONE, ABS (r, ((r, "f"), NONE, ABS (r, ((r, "z"), NONE, APP (r, (APP (r, (VAR (r, "f"), VAR (r, "x"))), APP (r, (APP (r, (VAR (r, "xs"), VAR (r, "f"))), VAR (r, "z")))))))))))))
  in
    LET (r, ((r, "nil"), NONE, nil', LET (r, ((r, "cons"), NONE, cons, encodeCharList' (r, l)))))
  end

  fun encodeString (r, s) = encodeCharList (r, map (fn c => encodeChar (r, c)) (String.explode s))
end

%%
%eop EOF
%pos cursor

%term
  EOF
| QUOTE
| LPAREN
| RPAREN
| ARROW
| DOT
| COLON
| COLONEQ
| LAMBDA
| DEF
| IN
| LET
| TYPE
| VAL
| NAT of LargeWord.word
| CHAR of char
| STRING of string
| ID of string

%nonterm
  program of AST.t
| decls of AST.decl list
| decl of AST.decl
| ty of Type.t
| atty of Type.t
| asc of Type.t option
| exp of TypedTerm.t
| appexp of TypedTerm.t
| atexp of TypedTerm.t

%name Parsing
%noshift EOF
%%

program:
  decls
    (decls)

decls:
    (nil)
| decl decls
    (decl :: decls)

decl:
  TYPE ID
    (AST.TYPE ((TYPEleft, IDright), (((IDleft, IDright), ID))))
| VAL ID COLON ty
    (AST.VAL ((VALleft, tyright), (((IDleft, IDright), ID), ty)))
| DEF ID asc COLONEQ exp
    (AST.DEF ((DEFleft, expright), (((IDleft, IDright), ID), asc, exp)))

ty:
  atty
    (atty)
| atty ARROW ty
    (Type.ARR ((attyleft, tyright), (atty, ty)))

atty:
  QUOTE ID
    (Type.VAR ((QUOTEleft, IDright), ID))
| ID
    (Type.CON ((IDleft, IDright), ID))
| LPAREN ty RPAREN
    (ty)

asc:
    (NONE)
| COLON ty
    (SOME ty)

exp:
  appexp
    (appexp)
| LAMBDA ID asc DOT exp
    (TypedTerm.ABS ((LAMBDAleft, expright), (((IDleft, IDright), ID), asc, exp)))
| LET ID asc COLONEQ exp IN exp
    (TypedTerm.LET ((LETleft, expright), (((IDleft, IDright), ID), asc, exp1, exp2)))

appexp:
  atexp
    (atexp)
| appexp atexp
    (TypedTerm.APP ((appexpleft, atexpright), (appexp, atexp)))

atexp:
  NAT
    (encodeNatOpt ((NATleft, NATright), NAT))
| CHAR
    (encodeChar ((CHARleft, CHARright), CHAR))
| STRING
    (encodeString ((STRINGleft, STRINGright), STRING))
| ID
    (TypedTerm.VAR ((IDleft, IDright), ID))
| LPAREN exp RPAREN
    (exp)
